(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{162:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/remote-agents-diagram-2ba28744ebf8bed67d57a987cf0961c0.svg"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(7),r=(n(0),n(89)),i={id:"remote-agent-api",title:"Remote Agent API",sidebar_label:"Remote Agent API"},l={unversionedId:"remote-agent-api",id:"remote-agent-api",isDocsHomePage:!1,title:"Remote Agent API",description:"How to Develop Your Own Activeworkflow Agents",source:"@site/docs/remote-agent-api.md",slug:"/remote-agent-api",permalink:"/remote-agent-api",version:"current",sidebar_label:"Remote Agent API",sidebar:"someSidebar",previous:{title:"Examples of Custom Agents",permalink:"/agent-examples"},next:{title:"Client REST API",permalink:"/rest-api"}},s=[{value:"Overview",id:"overview",children:[]},{value:"Protocol",id:"protocol",children:[{value:"Requests",id:"requests",children:[]},{value:"Responses",id:"responses",children:[]},{value:"Methods",id:"methods",children:[]}]},{value:"Deployment",id:"deployment",children:[]},{value:"Example Agents",id:"example-agents",children:[]}],c={toc:s};function p(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"How to Develop Your Own Activeworkflow Agents")),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"You can develop your own agents using ActiveWorkflow's Remote Agent API.\n","\u201c","Remote","\u201d"," in this context means that ",Object(r.b)("strong",{parentName:"p"},"agents run in separate processes"),"\nfrom ActiveWorkflow itself. Communication between agents and ActiveWorkflow\ntakes place via HTTP. Each agent is effectively an HTTP server which\nActiveWorkflow interacts with via the protocol described below."),Object(r.b)("p",null,Object(r.b)("img",{alt:"img",src:n(162).default,title:"Remote Agents diagram"})),Object(r.b)("h2",{id:"protocol"},"Protocol"),Object(r.b)("p",null,"ActiveWorkflow talks to an agent using the HTTP protocol and all the contents\nare in JSON (both requests and responses). Although all communication happens\nusing a single endpoint, ",Object(r.b)("strong",{parentName:"p"},"an agent has to implement and handle 3 ","\u201c","methods","\u201d",":\n",Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"#the-register-method"}),"register"),", ",Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"#the-receive-method"}),"receive"),",\nand ",Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"#the-check-method"}),"check"),".")),Object(r.b)("h3",{id:"requests"},"Requests"),Object(r.b)("p",null,"All requests have the following structure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "method": method,\n  "params": params\n}\n')),Object(r.b)("p",null,"Where ",Object(r.b)("inlineCode",{parentName:"p"},"method")," is the name of the method, ",Object(r.b)("inlineCode",{parentName:"p"},"params")," is a JSON object (key/value pairs) that holds all the parameters to the ",Object(r.b)("inlineCode",{parentName:"p"},"method")," call."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\u26a0\ufe0f Additional fields may be present in the request's JSON object, please\nonly use the ones described in this document. Any additional fields are not\nguaranteed to exist or to have any fixed meaning.")),Object(r.b)("h3",{id:"responses"},"Responses"),Object(r.b)("p",null,"A response from the agent should have the following structure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "result": result\n}\n')),Object(r.b)("p",null,"Where ",Object(r.b)("inlineCode",{parentName:"p"},"result")," is a JSON object (key/value pairs)."),Object(r.b)("h3",{id:"methods"},"Methods"),Object(r.b)("p",null,"There are three methods an agent has to implement."),Object(r.b)("h4",{id:"the-register-method"},"The ",Object(r.b)("inlineCode",{parentName:"h4"},"register")," method"),Object(r.b)("p",null,"This method is used by ActiveWorkflow to retrieve an agent's metadata. It is invoked when ActiveWorkflow starts."),Object(r.b)("p",null,"This method doesn't use any parameters."),Object(r.b)("p",null,"Example request:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "method": "register",\n  "params": {}\n}\n')),Object(r.b)("p",null,"An agent has to respond with the metadata describing it."),Object(r.b)("p",null,"Example response:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "result": {\n    "name": "MyAgent",\n    "display_name": "My Agent",\n    "description": "This is my first agent",\n    "default_options": {"option": "value"}\n  }\n}\n')),Object(r.b)("p",null,"Where:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"name"),": the name of an agent to be used in the agent type registry. It must be a\nunique identifier written in CamelCase;"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"display_name"),": the name of an agent to be used for UI purposes;"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"description"),": the (Markdown) description of an agent. It should include\nan introduction (the first line) and usage information, including a\ndescription of all configuration options;"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"default_options"),": the default options that a user can use as a starting\npoint when configuring an agent; this is an object (key/value collection).")),Object(r.b)("h4",{id:"the-receive-method"},"The ",Object(r.b)("inlineCode",{parentName:"h4"},"receive")," method"),Object(r.b)("p",null,"This is the method that ActiveWorkflow calls when an agent has to process a\nmessage. The contents of the message are in the ",Object(r.b)("inlineCode",{parentName:"p"},"payload")," field. Additionally\nActiveWorkflow submits all the configuration, memory (state), and user\ncredentials that an agent may need."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\u26a0\ufe0f Agents in ActiveWorkflow are ",Object(r.b)("strong",{parentName:"p"},"state-full entities"),", but your agent\nimplementation (",Object(r.b)("inlineCode",{parentName:"p"},"receive")," and ",Object(r.b)("inlineCode",{parentName:"p"},"check")," methods) ",Object(r.b)("strong",{parentName:"p"},"should be completely state-less"),".\nAll the ",Object(r.b)("em",{parentName:"p"},"necessary")," ","\u201c","state","\u201d"," is passed-in as parameters. Your agent\nimplementation should not store any data except in third party systems if that\nis the intended behaviour of an agent (i.e. an ElasticSearch agent may store\nmessages in an ElasticSearch instance, but even then the URL to that instance\nshould come from parameters). Agents can do some caching, but it should be done\nvery carefully. The agent ID is not in the parameters and you can't be sure if the\nsame agent instance will be scheduled next time.")),Object(r.b)("p",null,"Example request:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "method": "receive",\n  "params": {\n    "message": {\n      "payload": {"a": 1, "b": 2}\n    },\n    "options": {\n      "option": "value",\n      "email_credential": "admin_email"\n    },\n    "memory": {\n      "key": "value"\n    },\n    "credentials": [\n      {"name": "admin_email", "value": "admin@example.com"}\n    ]\n  }\n}\n')),Object(r.b)("p",null,"Where:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"message"),": the message object that an agent has to process, it must include a ",Object(r.b)("inlineCode",{parentName:"p"},"payload")," object;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"options"),": the configuration options for an agent, this is an object;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"memory"),": the memory (state) of an agent, can be updated by an agent;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"credentials"),": an array of user credentials; these are key/value pairs of\nstrings that the user sets to be used by an agent. Presence of any hard-coded\ncredentials should not be expected. Credential data should be only used if\nexplicitly configured by the user, like in the example above\nwhere the ",Object(r.b)("inlineCode",{parentName:"p"},"email_credential")," option explicitly refers to the ",Object(r.b)("inlineCode",{parentName:"p"},"admin_email")," credential."))),Object(r.b)("p",null,"An agent should respond with any new messages, log entries, error log entries and updated memory."),Object(r.b)("p",null,"Example response:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "result": {\n    "errors": [\n      "Something failed",\n      "Something else failed"\n    ],\n    "logs": [\n      "Something happened",\n      "Something else happened"\n    ],\n    "memory": {\n      "key": "new value"\n    },\n    "messages": [\n      {\n        "a": 5\n      },\n      {\n        "a": 6\n      }\n    ]\n  }\n}\n')),Object(r.b)("p",null,"Where:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"errors"),": optional, an array of error strings if errors occurred during execution;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"logs"),": optional, an array of strings to log, for debugging/info purposes;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"memory"),": optional, new content of the memory for an agent, old memory\ncontent will be ",Object(r.b)("strong",{parentName:"p"},"replaced")," with the new content;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"messages"),": optional, an array of message payloads; each payload must be an\nobject. In the example above there are two messages emitted."))),Object(r.b)("h4",{id:"the-check-method"},"The ",Object(r.b)("inlineCode",{parentName:"h4"},"check")," method"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"check")," method is very much like the ",Object(r.b)("inlineCode",{parentName:"p"},"receive")," method, but it is called on schedule\n(set by the user) and ",Object(r.b)("strong",{parentName:"p"},"has no message to process"),". Everything else is exactly\nlike in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#the-receive-method"}),"receive")," method. It can be used when you want\nyour agent to periodically perform some task. For example, to check an email\nInbox and emit the number of unread messages."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\u26a0\ufe0f Agents in ActiveWorkflow are ",Object(r.b)("strong",{parentName:"p"},"state-full entities"),", but your agent\nimplementation (",Object(r.b)("inlineCode",{parentName:"p"},"receive")," and ",Object(r.b)("inlineCode",{parentName:"p"},"check")," methods) ",Object(r.b)("strong",{parentName:"p"},"should be completely state-less"),".\nAll the ",Object(r.b)("em",{parentName:"p"},"necessary")," ","\u201c","state","\u201d"," is passed-in as parameters. Your agent\nimplementation should not store any data except in third party systems if that\nis the intended behaviour of an agent (i.e. an ElasticSearch agent may store\nmessages in an ElasticSearch instance, but even then the URL to that instance\nshould come from parameters). Agents can do some caching, but it should be done\nvery carefully. The agent ID is not in the parameters and you can't be sure if the\nsame agent instance will be scheduled next time.")),Object(r.b)("p",null,"Example request:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "method": "check",\n  "params": {\n    "message": null,\n    "options": {\n      "option": "value"\n    },\n    "memory": {\n      "key": "value"\n    },\n    "credentials": [\n      {"name": "admin_email", "value": "admin@example.com"}\n    ]\n  }\n}\n')),Object(r.b)("p",null,"Example response:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "result": {\n    "errors": [\n      "Something failed",\n      "Something else failed"\n    ],\n    "logs": [\n      "Something happened",\n      "Something else happened"\n    ],\n    "memory": {\n      "key": "new value"\n    },\n    "messages": [\n      {\n        "a": 5\n      },\n      {\n        "a": 6\n      }\n    ]\n  }\n}\n')),Object(r.b)("p",null,"Where:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"errors"),": optional, an array of error strings if errors occurred during execution;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"logs"),": optional, an array of strings to log, for debugging/info purposes;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"memory"),": optional, new content of the memory for an agent, old memory\ncontent will be ",Object(r.b)("strong",{parentName:"p"},"replaced")," with the new content;")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"messages"),": optional, an array of message payloads; each payload must be an\nobject. In the example above there are two messages emitted."))),Object(r.b)("h2",{id:"deployment"},"Deployment"),Object(r.b)("p",null,"The flexibility to implement remote agents using any technology stack also has a cost,\nwhich is having to deploy and run the agents. Each agent has to expose a single endpoint.\nActiveWorkflow ",Object(r.b)("strong",{parentName:"p"},"will not restart or interfere with your agents' process (or container)"),"\nin any way. We suggest using a supervisor (e.g., systemd) of your choice, or functionality\nprovided by docker and its orchestration solutions. In the near future we intend to provide some\nguidelines and examples for the most common deployment scenarios; please stay tuned."),Object(r.b)("p",null,"To inform ActiveWorkflow about an agent you have to set an environment variable pointing to the URL of the agent:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"REMOTE_AGENT_URL=https://localhost:4567/agent_path\n")),Object(r.b)("p",null,"You can configure multiple agents by setting multiple environment variables with postfixed incremental numbering:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"REMOTE_AGENT_URL_2=https://otherhost:80/another_agent\n")),Object(r.b)("p",null,"In development if you are using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/#running-locally-with-docker"}),"docker to run ActiveWorkflow"),",\nyou'll need to use the ",Object(r.b)("inlineCode",{parentName:"p"},"-e")," parameter to ",Object(r.b)("inlineCode",{parentName:"p"},"docker run")," to pass ",Object(r.b)("inlineCode",{parentName:"p"},"REMOTE_AGENT_URL")," through\nto ActiveWorkflow. The address in the URL will also have to be updated to match where the agent\nis running (",Object(r.b)("inlineCode",{parentName:"p"},"127.0.0.1")," is unlikely to be correct). Docker provides ",Object(r.b)("inlineCode",{parentName:"p"},"host.docker.internal")," for the host IP.\nThus, you could run:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),'docker run -e REMOTE_AGENT_URL="http://host.docker.internal:5000/" -p 3000:3000 --rm automaticmode/active_workflow\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"\u26a0\ufe0f Currently there is no authorisation support when connecting to remote agents, please ensure URLs are not publicly accessible.")),Object(r.b)("h2",{id:"example-agents"},"Example Agents"),Object(r.b)("p",null,"Please see the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"agent-examples"}),"Examples of Custom Agents")," page, which you will hopefully find useful as a reference or as a starting point for making your own agents."))}p.isMDXComponent=!0},89:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||r;return n?o.a.createElement(d,l(l({ref:t},c),{},{components:n})):o.a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);